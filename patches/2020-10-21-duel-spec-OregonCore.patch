From 9a83bbf5a20dce1482c0445f2d7e53f3dd58a789 Mon Sep 17 00:00:00 2001
From: irancore <amir.cinderella@gmail.com>
Date: Wed, 23 Sep 2020 18:44:09 +0330
Subject: [PATCH] duel spec

---
 sql/custom/characters/charactersDual_spec.sql |  24 ++
 src/server/game/Entities/Player/Player.cpp    | 330 +++++++++++++++---
 src/server/game/Entities/Player/Player.h      |  32 +-
 src/server/game/Globals/SharedDefines.h       |   3 +-
 src/server/game/Handlers/CharacterHandler.cpp |   5 +-
 src/server/game/Handlers/SkillHandler.cpp     | 109 +++++-
 src/server/game/Scripting/ScriptLoader.cpp    |   2 +
 src/server/scripts/Custom/custom_dualspec.cpp | 102 ++++++
 8 files changed, 557 insertions(+), 50 deletions(-)
 create mode 100644 sql/custom/characters/charactersDual_spec.sql
 create mode 100644 src/server/scripts/Custom/custom_dualspec.cpp

diff --git a/sql/custom/characters/charactersDual_spec.sql b/sql/custom/characters/charactersDual_spec.sql
new file mode 100644
index 00000000..28abb1e0
--- /dev/null
+++ b/sql/custom/characters/charactersDual_spec.sql
@@ -0,0 +1,24 @@
+DROP TABLE IF EXISTS `character_talent`;
+CREATE TABLE `character_talent` (
+  `guid` int(11) unsigned NOT NULL DEFAULT '0',
+  `spell` int(11) unsigned NOT NULL DEFAULT '0',
+  `spec` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`,`spec`)
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+ALTER TABLE `character_action`
+    ADD COLUMN `spec` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0' AFTER `guid`,
+    DROP PRIMARY KEY,
+    ADD PRIMARY KEY (`guid`, `spec`, `button`);
+
+ALTER TABLE `characters`
+    ADD COLUMN `specCount` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1' AFTER `grantableLevels`,
+    ADD COLUMN `activeSpec` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0' AFTER `specCount`;
+
+DROP TABLE IF EXISTS `character_talent_name`;
+CREATE TABLE `character_talent_name` (
+      `guid` int(11) unsigned NOT NULL DEFAULT '0',
+      `spec` tinyint(3) unsigned NOT NULL DEFAULT '0',
+      `name` varchar(255) NOT NULL DEFAULT '',
+      PRIMARY KEY (`guid`,`spec`)
+    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
\ No newline at end of file
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index b3fe61ac..a2c87178 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -476,7 +476,8 @@ Player::Player(WorldSession* session) : Unit(true), m_reputationMgr(this)
     m_divider = 0;
 
     m_ExtraFlags = 0;
-
+    m_activeSpec = 0;
+    m_specsCount = 1;
 	spectatorFlag = false;
 
     // players always accept
@@ -663,7 +664,11 @@ Player::~Player()
         delete m_items[i];
 
     CleanupChannels();
-
+	for (uint8 i = 0; i < MAX_TALENT_SPECS; ++i)
+	{
+		for (PlayerTalentMap::const_iterator itr = m_talents[i].begin(); itr != m_talents[i].end(); ++itr)
+		delete itr->second;
+	}
     //all mailed items should be deleted, also all mail should be deallocated
     for (PlayerMails::iterator itr =  m_mail.begin(); itr != m_mail.end(); ++itr)
         delete *itr;
@@ -3931,30 +3936,38 @@ bool Player::ResetTalents(bool no_cost)
         if ((getClassMask() & talentTabInfo->ClassMask) == 0)
             continue;
 
-        for (int j = 0; j < 5; ++j)
-        {
-            for (PlayerSpellMap::iterator itr = GetSpellMap().begin(); itr != GetSpellMap().end();)
-            {
-                if (itr->second.state == PLAYERSPELL_REMOVED || itr->second.disabled)
-                {
-                    ++itr;
-                    continue;
-                }
-
-                // remove learned spells (all ranks)
-                uint32 itrFirstId = sSpellMgr.GetFirstSpellInChain(itr->first);
+		for (int j = 0; j < 5; ++j)
+	{
+		for (PlayerSpellMap::iterator itr = GetSpellMap().begin(); itr != GetSpellMap().end();)
+			{
+				if (itr->second.state == PLAYERSPELL_REMOVED || itr->second.disabled)
+				{
+					++itr;
+					continue;
+				}
+
+				// remove learned spells (all ranks)
+				uint32 itrFirstId = sSpellMgr.GetFirstSpellInChain(itr->first);
+
+				// unlearn if first rank is talent or learned by talent
+				if (itrFirstId == talentInfo->RankID[j] || sSpellMgr.IsSpellLearnToSpell(talentInfo->RankID[j], itrFirstId))
+				{
+					RemoveSpell(itr->first, !IsPassiveSpell(itr->first));
+					// if this talent rank can be found in the PlayerTalentMap, mark the talent as removed so it gets deleted
+					PlayerTalentMap::iterator plrTalent = m_talents[m_activeSpec].find(talentInfo->RankID[j]);
+					if (plrTalent != m_talents[m_activeSpec].end())
+					plrTalent->second->state = PLAYERSPELL_REMOVED;
+				itr = GetSpellMap().begin();
+				continue;
+				}
+				else
+					++itr;
+			}
+		}
+    }
 
-                // unlearn if first rank is talent or learned by talent
-                if (itrFirstId == talentInfo->RankID[j] || sSpellMgr.IsSpellLearnToSpell(talentInfo->RankID[j], itrFirstId))
-                {
-                    RemoveSpell(itr->first, !IsPassiveSpell(itr->first));
-                    itr = GetSpellMap().begin();
-                    continue;
-                }
-                else
-                    ++itr;
-            }
-        }
+	_SaveTalents();
+	_SaveSpells();
     }
 
     SetFreeTalentPoints(talentPointsForLevel);
@@ -3969,7 +3982,11 @@ bool Player::ResetTalents(bool no_cost)
 
     return true;
 }
-
+bool Player::HasTalent(uint32 spell, uint8 spec) const
+{
+	PlayerTalentMap::const_iterator itr = m_talents[spec].find(spell);
+	return (itr != m_talents[spec].end() && itr->second->state != PLAYERSPELL_REMOVED);
+}
 Mail* Player::GetMail(uint32 id)
 {
     for (PlayerMails::iterator itr = m_mail.begin(); itr != m_mail.end(); ++itr)
@@ -4434,6 +4451,8 @@ void Player::DeleteFromDB(uint64 playerguid, uint32 accountId, bool updateRealmC
             CharacterDatabase.PExecute("DELETE FROM character_skills WHERE guid = '%u'", guid);
             CharacterDatabase.PExecute("DELETE FROM character_spell WHERE guid = '%u'", guid);
             CharacterDatabase.PExecute("DELETE FROM character_spell_cooldown WHERE guid = '%u'", guid);
+			CharacterDatabase.PExecute("DELETE FROM character_talent WHERE guid = '%u'", guid);
+            CharacterDatabase.PExecute("DELETE FROM character_talent_name WHERE guid = '%u'", guid);
             CharacterDatabase.PExecute("DELETE FROM gm_tickets WHERE playerGuid = '%u'", guid);
             CharacterDatabase.PExecute("DELETE FROM item_instance WHERE owner_guid = '%u'", guid);
             CharacterDatabase.PExecute("DELETE FROM character_social WHERE guid = '%u' OR friend='%u'", guid, guid);
@@ -6002,7 +6021,7 @@ int16 Player::GetSkillTempBonusValue(uint32 skill) const
     return SKILL_PERM_BONUS(GetUInt32Value(PLAYER_SKILL_BONUS_INDEX(itr->second.pos)));
 }
 
-void Player::SendInitialActionButtons()
+/*void Player::SendInitialActionButtons()
 {
     sLog.outDetail("Initializing Action Buttons for '%u'", GetGUIDLow());
 
@@ -6022,8 +6041,39 @@ void Player::SendInitialActionButtons()
 
     GetSession()->SendPacket(&data);
     sLog.outDetail("Action Buttons for '%u' Initialized", GetGUIDLow());
-}
+}*/
+void Player::SendActionButtons(uint32 state) const
+{
+    WorldPacket data(SMSG_ACTION_BUTTONS, (MAX_ACTION_BUTTONS * 4));
+    //data << uint8(state);
 
+    /*
+    state can be 0, 1
+    0 - Clears the action bars client sided. This is sent during spec swap before unlearning and before sending the new buttons. Doesn't work in 2.4.3
+    1 - Used in any SMSG_ACTION_BUTTONS packet with button data.
+    */
+
+    if (state)
+    {
+        for (uint8 button = 0; button < MAX_ACTION_BUTTONS; ++button)
+        {
+            ActionButtonList::const_iterator itr = m_actionButtons.find(button);
+            if (itr != m_actionButtons.end() && itr->second.uState != ACTIONBUTTON_DELETED)
+            {
+                data << uint16(itr->second.action);
+                data << uint8(itr->second.misc);
+                data << uint8(itr->second.type);
+            }
+            else
+                data << uint32(0);
+        }
+    }
+    else
+        data << uint32(0);
+
+    GetSession()->SendPacket(&data);
+    sLog.outDetail("SMSG_ACTION_BUTTONS sent '%u' spec '%u'", GetGUIDLow(), m_activeSpec);
+}
 void Player::addActionButton(const uint8 button, const uint16 action, const uint8 type, const uint8 misc)
 {
     if (button >= MAX_ACTION_BUTTONS)
@@ -15446,6 +15496,7 @@ bool Player::LoadFromDB(uint32 guid, SqlQueryHolder* holder)
     if (HasFlag(PLAYER_FLAGS, PLAYER_FLAGS_GHOST))
         m_deathState = DEAD;
 
+	_LoadTalents(holder->GetResult(PLAYER_LOGIN_QUERY_LOADTALENTS));	
     _LoadSpells(holder->GetResult(PLAYER_LOGIN_QUERY_LOADSPELLS));
 
     // after spell load
@@ -15466,7 +15517,12 @@ bool Player::LoadFromDB(uint32 guid, SqlQueryHolder* holder)
     // update items with duration and realtime
     UpdateItemDuration(time_diff, true);
 
-    _LoadActions(holder->GetResult(PLAYER_LOGIN_QUERY_LOADACTIONS));
+    //_LoadActions(holder->GetResult(PLAYER_LOGIN_QUERY_LOADACTIONS));
+	m_specsCount = fields[57].GetUInt32();
+    m_activeSpec = fields[58].GetUInt32();
+ 
+    QueryResult_AutoPtr actionResult = CharacterDatabase.PQuery("SELECT button, action, type, misc FROM character_action WHERE guid = '%u' AND spec = '%u' ORDER BY button", GetGUIDLow(), m_activeSpec);
+    _LoadActions(actionResult);
 
     // unread mails and next delivery time, actual mails not loaded
     _LoadMailInit(holder->GetResult(PLAYER_LOGIN_QUERY_LOADMAILCOUNT), holder->GetResult(PLAYER_LOGIN_QUERY_LOADMAILDATE));
@@ -15559,7 +15615,21 @@ bool Player::LoadFromDB(uint32 guid, SqlQueryHolder* holder)
 
     return true;
 }
+void Player::_LoadTalents(QueryResult_AutoPtr result)
+{
+    //QueryResult *result = CharacterDatabase.PQuery("SELECT spell,spec FROM character_talents WHERE guid = '%u'",GetGUIDLow());
+
+    if (result)
+    {
+        do
+        {
+            Field *fields = result->Fetch();
 
+            addTalent(fields[0].GetUInt32(), fields[1].GetUInt8(), false);
+        }
+        while (result->NextRow());
+    }
+}
 bool Player::isAllowedToLoot(const Creature* creature)
 {
     if (!creature->isDead() && !creature->IsDamageEnoughForLootingAndReward())
@@ -16827,7 +16897,7 @@ void Player::SaveToDB()
        "trans_x, trans_y, trans_z, trans_o, transguid, extra_flags, stable_slots, at_login, zone, "
        "death_expire_time, taxi_path, arenaPoints, totalHonorPoints, todayHonorPoints, yesterdayHonorPoints, "
        "totalKills, todayKills, yesterdayKills, chosenTitle, watchedFaction, drunk, grantableLevels, health, "
-       "powerMana, powerRage, powerFocus, powerEnergy, powerHappiness, latency) VALUES ("
+       "powerMana, powerRage, powerFocus, powerEnergy, powerHappiness, latency,specCount, activeSpec) VALUES ("
        << GetGUIDLow() << ", "
        << GetSession()->GetAccountId() << ", '"
        << sql_name << "', "
@@ -16937,7 +17007,11 @@ void Player::SaveToDB()
     ss << ", '";
 
     ss << GetSession()->GetLatency();
-    ss << "')";
+    ss << ", '";
+	ss << uint32(m_specsCount);
+    ss << ", '";
+    ss << uint32(m_activeSpec);
+	ss << "')";
 
     CharacterDatabase.BeginTransaction();
 
@@ -16991,20 +17065,20 @@ void Player::_SaveActions()
         switch (itr->second.uState)
         {
             case ACTIONBUTTON_NEW:
-                CharacterDatabase.PExecute("INSERT INTO character_action (guid,button,action,type,misc) VALUES ('%u', '%u', '%u', '%u', '%u')",
-                                           GetGUIDLow(), (uint32)itr->first, (uint32)itr->second.action, (uint32)itr->second.type, (uint32)itr->second.misc);
-                itr->second.uState = ACTIONBUTTON_UNCHANGED;
+                CharacterDatabase.PExecute("INSERT INTO character_action (guid, spec, button, action, type, misc) VALUES ('%u', '%u', '%u', '%u', '%u', '%u')",
+                    GetGUIDLow(), (uint32)m_activeSpec, (uint32)itr->first, (uint32)itr->second.action, (uint32)itr->second.type, (uint32)itr->second.misc);
+                 itr->second.uState = ACTIONBUTTON_UNCHANGED;
                 ++itr;
                 break;
             case ACTIONBUTTON_CHANGED:
-                CharacterDatabase.PExecute("UPDATE character_action  SET action = '%u', type = '%u', misc= '%u' WHERE guid= '%u' AND button= '%u' ",
-                                           (uint32)itr->second.action, (uint32)itr->second.type, (uint32)itr->second.misc, GetGUIDLow(), (uint32)itr->first);
-                itr->second.uState = ACTIONBUTTON_UNCHANGED;
+                CharacterDatabase.PExecute("UPDATE character_action  SET action = '%u', type = '%u', misc= '%u' WHERE guid= '%u' AND button= '%u' AND spec= '%u'",
+                    (uint32)itr->second.action, (uint32)m_activeSpec, (uint32)itr->second.type, (uint32)itr->second.misc, GetGUIDLow(), (uint32)itr->first);
+                 itr->second.uState = ACTIONBUTTON_UNCHANGED;
                 ++itr;
                 break;
             case ACTIONBUTTON_DELETED:
-                CharacterDatabase.PExecute("DELETE FROM character_action WHERE guid = '%u' and button = '%u'", GetGUIDLow(), (uint32)itr->first);
-                m_actionButtons.erase(itr++);
+                CharacterDatabase.PExecute("DELETE FROM character_action WHERE guid = '%u' AND button = '%u' AND spec = '%u'", GetGUIDLow(), (uint32)itr->first, (uint32)m_activeSpec);
+                 m_actionButtons.erase(itr++);
                 break;
             default:
                 ++itr;
@@ -17012,7 +17086,137 @@ void Player::_SaveActions()
         }
     }
 }
+void Player::_SaveTalents()
+{
+	for (uint8 i = 0; i < MAX_TALENT_SPECS; ++i)
+	{
+		for (PlayerTalentMap::const_iterator itr = m_talents[i].begin(); itr != m_talents[i].end();)
+		{
+			if (itr->second->state == PLAYERSPELL_REMOVED || itr->second->state == PLAYERSPELL_CHANGED)
+				CharacterDatabase.PExecute("DELETE FROM character_talent WHERE guid = '%u' and spell = '%u' and spec = '%u'", GetGUIDLow(), itr->first, itr->second->spec);
+			if (itr->second->state == PLAYERSPELL_NEW || itr->second->state == PLAYERSPELL_CHANGED)
+				CharacterDatabase.PExecute("INSERT INTO character_talent (guid,spell,spec) VALUES ('%u', '%u', '%u')", GetGUIDLow(), itr->first, itr->second->spec);
+
+			if (itr->second->state == PLAYERSPELL_REMOVED)
+			{
+				delete itr->second;
+				m_talents[i].erase(itr++);
+			}
+			else
+			{
+				itr->second->state = PLAYERSPELL_UNCHANGED;
+				++itr;
+			}
+		}
+	}
+}
+void Player::ActivateSpec(uint8 spec)
+{
+    if (GetActiveSpec() == spec)
+        return;
+
+    if (spec > GetSpecsCount())
+        return;
+
+    if (IsNonMeleeSpellCast(false))
+        InterruptNonMeleeSpells(false);
+
+    // Save current Actions
+    _SaveActions();
+
+    // TO-DO: We need more research to know what happens with warlock's reagent
+    if (Pet* pet = GetPet())
+        RemovePet(pet, PET_SAVE_NOT_IN_SLOT, true);
+
+    ClearComboPointHolders();
+    ClearAllReactives();
+    UnsummonAllTotems();
+
+	// REMOVE TALENTS
+	for (uint32 talentId = 0; talentId < sTalentStore.GetNumRows(); ++talentId)
+	{
+		TalentEntry const *talentInfo = sTalentStore.LookupEntry(talentId);
 
+		if (!talentInfo)
+			continue;
+
+		TalentTabEntry const *talentTabInfo = sTalentTabStore.LookupEntry(talentInfo->TalentTab);
+
+		if (!talentTabInfo)
+			continue;
+
+		// unlearn only talents for character class
+		// some spell learned by one class as normal spells or know at creation but another class learn it as talent,
+		// to prevent unexpected lost normal learned spell skip another class talents
+		if ((getClassMask() & talentTabInfo->ClassMask) == 0)
+			continue;
+
+		for (int8 rank = MAX_TALENT_RANK - 1; rank >= 0; --rank)
+		{
+			if (talentInfo->RankID[rank] == 0)
+				continue;
+			RemoveSpell(talentInfo->RankID[rank], true); // removes the talent, and all dependant, learned, and chained spells..
+			if (SpellEntry const* spellInfo = sSpellStore.LookupEntry(talentInfo->RankID[rank]))
+				for (uint8 i = 0; i < MAX_SPELL_EFFECTS; ++i)                  // search through the SpellInfo for valid trigger spells
+					if (spellInfo->EffectTriggerSpell[i] > 0 && spellInfo->Effect[i] == SPELL_EFFECT_LEARN_SPELL)
+						RemoveSpell(spellInfo->EffectTriggerSpell[i], true); // and remove any spells that the talent teaches
+		}
+	}
+
+	SetActiveSpec(spec);
+	uint32 spentTalents = 0;
+
+	// ADD TALENTS
+	for (uint32 talentId = 0; talentId < sTalentStore.GetNumRows(); ++talentId)
+	{
+		TalentEntry const *talentInfo = sTalentStore.LookupEntry(talentId);
+
+		if (!talentInfo)
+			continue;
+
+		TalentTabEntry const *talentTabInfo = sTalentTabStore.LookupEntry(talentInfo->TalentTab);
+
+		if (!talentTabInfo)
+			continue;
+
+		// learn only talents for character class
+		if ((getClassMask() & talentTabInfo->ClassMask) == 0)
+			continue;
+
+		for (int8 rank = 0; rank < 5; rank++)
+		{
+			// skip non-existant talent ranks
+			if (talentInfo->RankID[rank] == 0)
+				continue;
+			// if the talent can be found in the newly activated PlayerTalentMap
+			if (HasTalent(talentInfo->RankID[rank], m_activeSpec))
+			{
+				LearnSpell(talentInfo->RankID[rank]);
+				spentTalents += (rank + 1);             // increment the spentTalents count
+			}
+		}
+	}
+
+	m_usedTalentCount = spentTalents;
+	InitTalentForLevel();
+
+	GetSession()->LogoutPlayer(true);
+}
+
+std::string Player::GetSpecName(uint8 spec)
+{
+    QueryResult_AutoPtr result = CharacterDatabase.PQuery("SELECT name FROM character_talent_name WHERE guid='%u' AND spec='%u'", GetGUIDLow(), spec);
+    if (!result)
+        return "NULL";
+
+    return (*result)[0].GetString();
+}
+
+void Player::SetSpecName(uint8 spec, const char* specName)
+{
+    CharacterDatabase.PExecute("DELETE FROM character_talent_name WHERE guid='%u' AND spec='%u'", GetGUIDLow(), spec);
+    CharacterDatabase.PExecute("INSERT INTO character_talent_name (guid,spec,name) VALUES ('%u', '%u', '%s')", GetGUIDLow(), spec, specName);
+}
 void Player::_SaveAuras()
 {
     CharacterDatabase.PExecute("DELETE FROM character_aura WHERE guid = '%u'", GetGUIDLow());
@@ -21363,6 +21567,50 @@ void Player::RemoveRestFlag(RestFlag restFlag)
     if (oldRestMask && !_restFlagMask) // only remove flag/time on the last rest state remove
     {
         _restTime = 0;
-        RemoveFlag(PLAYER_FLAGS, PLAYER_FLAGS_RESTING);
-    }
+       RemoveFlag(PLAYER_FLAGS, PLAYER_FLAGS_RESTING);
+   }
 }
+void Player::addTalent(uint32 spellId, uint8 spec, bool learning)
+{
+	SpellEntry const* spellInfo = sSpellStore.LookupEntry(spellId);
+	if (!spellInfo)
+	{
+		sLog.outDetail("Player::addTalent: Non-existed in SpellStore spell #%u request.", spellId);
+		return;
+	}
+
+	if (!sSpellMgr.IsSpellValid(spellInfo, this, false))
+	{
+		sLog.outDetail("Player::addTalent: Broken spell #%u learning not allowed.", spellId);
+		return;
+	}
+
+	PlayerTalentMap::iterator itr = m_talents[spec].find(spellId);
+	if (itr != m_talents[spec].end())
+		itr->second->state = PLAYERSPELL_UNCHANGED;
+	else if (TalentSpellPos const* talentPos = GetTalentSpellPos(spellId))
+	{
+		if (TalentEntry const* talentInfo = sTalentStore.LookupEntry(talentPos->talent_id))
+		{
+			for (uint8 rank = 0; rank < MAX_TALENT_RANK; ++rank)
+			{
+				// skip learning spell and no rank spell case
+				uint32 rankSpellId = talentInfo->RankID[rank];
+				if (!rankSpellId || rankSpellId == spellId)
+					continue;
+
+				itr = m_talents[spec].find(rankSpellId);
+				if (itr != m_talents[spec].end())
+					itr->second->state = PLAYERSPELL_REMOVED;
+			}
+		}
+
+		PlayerSpellState state = learning ? PLAYERSPELL_NEW : PLAYERSPELL_UNCHANGED;
+		PlayerTalent* newtalent = new PlayerTalent();
+
+		newtalent->state = state;
+		newtalent->spec = spec;
+
+		(m_talents[spec])[spellId] = newtalent;
+	}
+}
\ No newline at end of file
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
index d1e81a5f..8699f74f 100644
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -89,6 +89,11 @@ enum PlayerSpellState
     PLAYERSPELL_NEW       = 2,
     PLAYERSPELL_REMOVED   = 3
 };
+struct PlayerTalent
+{
+    PlayerSpellState state : 8;
+    uint8 spec : 8;
+};
 
 struct PlayerSpell
 {
@@ -109,7 +114,7 @@ struct SpellModifier
     uint32 effectId;
     Spell const* lastAffected;
 };
-
+typedef std::unordered_map<uint32, PlayerTalent*> PlayerTalentMap;
 typedef UNORDERED_MAP<uint16, PlayerSpell> PlayerSpellMap;
 typedef std::list<SpellModifier*> SpellModList;
 
@@ -142,6 +147,7 @@ struct ActionButton
     ActionButton(uint16 _action, uint8 _type, uint8 _misc) : action(_action), type(_type), misc(_misc), uState(ACTIONBUTTON_NEW) {}
 
     uint16 action;
+	uint8 spec;
     uint8 type;
     uint8 misc;
     ActionButtonUpdateState uState;
@@ -723,6 +729,7 @@ enum PlayerLoginQueryIndex
     PLAYER_LOGIN_QUERY_LOADARENAINFO            = 18,
     PLAYER_LOGIN_QUERY_LOADBGDATA               = 19,
     PLAYER_LOGIN_QUERY_LOADSKILLS               = 20,
+	PLAYER_LOGIN_QUERY_LOADTALENTS              = 21,
 
     MAX_PLAYER_LOGIN_QUERY
 };
@@ -1687,6 +1694,7 @@ class Player : public Unit, public GridObject<Player>
         void CharmSpellInitialize();
         void PossessSpellInitialize();
         void SendRemoveControlBar();
+		bool HasTalent(uint32 spell, uint8 spec) const;
         bool HasSpell(uint32 spell) const override;
         bool HasActiveSpell(uint32 spell) const;            // shown in spellbook
         TrainerSpellState GetTrainerSpellState(TrainerSpell const* trainer_spell) const;
@@ -1704,6 +1712,7 @@ class Player : public Unit, public GridObject<Player>
         void LearnSpellHighestRank(uint32 spellid);
         uint32 GetHighestLearnedRankOf(uint32 spellid) const override;
 
+		void addTalent(uint32 spellId, uint8 spec, bool learning);
         uint32 GetFreeTalentPoints() const
         {
             return GetUInt32Value(PLAYER_CHARACTER_POINTS1);
@@ -1767,7 +1776,20 @@ class Player : public Unit, public GridObject<Player>
         void AddGlobalCooldown(SpellEntry const* spellInfo, Spell* spell);
         bool HasGlobalCooldown(SpellEntry const* spellInfo) const;
         void RemoveGlobalCooldown(SpellEntry const* spellInfo);
-
+		// dual spec
+        uint8 m_activeSpec;
+        uint8 m_specsCount;
+
+        void ActivateSpec(uint8 spec);
+        uint8 GetActiveSpec() { return m_activeSpec; }
+        void SetActiveSpec(uint8 spec) { m_activeSpec = spec; }
+        uint8 GetSpecsCount() { return m_specsCount; }
+        void SetSpecsCount(uint8 count) { m_specsCount = count; }
+
+        std::string GetSpecName(uint8 spec);
+        void SetSpecName(uint8 spec, const char* specName);
+        std::string specName;
+		
         void setResurrectRequestData(uint64 guid, uint32 mapId, float X, float Y, float Z, uint32 health, uint32 mana)
         {
             m_resurrectGUID = guid;
@@ -1803,7 +1825,8 @@ class Player : public Unit, public GridObject<Player>
 
         void addActionButton(uint8 button, uint16 action, uint8 type, uint8 misc);
         void removeActionButton(uint8 button);
-        void SendInitialActionButtons();
+		void SendInitialActionButtons() const { SendActionButtons(1); };
+        void SendActionButtons(uint32 state) const;
 
         PvPInfo pvpInfo;
         void UpdatePvPState(bool onlyFFA = false);
@@ -2788,6 +2811,7 @@ class Player : public Unit, public GridObject<Player>
         void _LoadDailyQuestStatus(QueryResult_AutoPtr result);
         void _LoadGroup(QueryResult_AutoPtr result);
         void _LoadSkills(QueryResult_AutoPtr result);
+		void _LoadTalents(QueryResult_AutoPtr result);
         void _LoadSpells(QueryResult_AutoPtr result);
         void _LoadTutorials(QueryResult_AutoPtr result);
         void _LoadFriendList(QueryResult_AutoPtr result);
@@ -2807,6 +2831,7 @@ class Player : public Unit, public GridObject<Player>
         void _SaveQuestStatus();
         void _SaveDailyQuestStatus();
         void _SaveSkills();
+		void _SaveTalents();
         void _SaveSpells();
         void _SaveTutorials();
         void _SaveBGData();
@@ -2861,6 +2886,7 @@ class Player : public Unit, public GridObject<Player>
 
         PlayerMails m_mail;
         PlayerSpellMap m_spells;
+		PlayerTalentMap m_talents[MAX_TALENT_SPECS];
         SpellCooldowns m_spellCooldowns;
         std::map<uint32, uint32> m_globalCooldowns; // whole start recovery category stored in one
 
diff --git a/src/server/game/Globals/SharedDefines.h b/src/server/game/Globals/SharedDefines.h
index 90dc7a91..c8ef780a 100644
--- a/src/server/game/Globals/SharedDefines.h
+++ b/src/server/game/Globals/SharedDefines.h
@@ -31,7 +31,8 @@ enum SpellEffIndex
 // used in script definitions
 #define EFFECT_FIRST_FOUND 254
 #define EFFECT_ALL 255
-
+#define MAX_TALENT_RANK 5
+#define MAX_TALENT_SPECS 2
 enum Gender
 {
     GENDER_MALE                        = 0,
diff --git a/src/server/game/Handlers/CharacterHandler.cpp b/src/server/game/Handlers/CharacterHandler.cpp
index 134a9c72..a53e5348 100644
--- a/src/server/game/Handlers/CharacterHandler.cpp
+++ b/src/server/game/Handlers/CharacterHandler.cpp
@@ -84,7 +84,7 @@ bool LoginQueryHolder::Initialize()
                      "arenaPoints, totalHonorPoints, todayHonorPoints, "
                      "yesterdayHonorPoints, totalKills, todayKills, yesterdayKills, "
                      "chosenTitle, watchedFaction, drunk, health, "
-                     "powerMana, powerRage, powerFocus, powerEnergy, powerHappiness, instance_id, grantableLevels "
+                     "powerMana, powerRage, powerFocus, powerEnergy, powerHappiness, instance_id, grantableLevels , specCount, activeSpec"
                      "FROM characters WHERE guid = '%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADGROUP,           "SELECT leaderGuid FROM group_member WHERE memberGuid ='%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADBOUNDINSTANCES,  "SELECT id, permanent, map, difficulty, resettime FROM character_instance LEFT JOIN instance ON instance = id WHERE guid = '%u'", GUID_LOPART(m_guid));
@@ -95,7 +95,7 @@ bool LoginQueryHolder::Initialize()
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADTUTORIALS,       "SELECT tut0,tut1,tut2,tut3,tut4,tut5,tut6,tut7 FROM character_tutorial WHERE account = '%u' AND realmid = '%u'", GetAccountId(), realmID);
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADREPUTATION,      "SELECT faction,standing,flags FROM character_reputation WHERE guid = '%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADINVENTORY,       "SELECT itemEntry,creatorGuid,giftCreatorGuid,count,duration,charges,flags,enchantments,randomPropertyId,durability,itemTextId,bag,slot,item,item_template FROM character_inventory JOIN item_instance ON character_inventory.item = item_instance.guid WHERE character_inventory.guid = '%u' ORDER BY bag,slot", GUID_LOPART(m_guid));
-    res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADACTIONS,         "SELECT button,action,type,misc FROM character_action WHERE guid = '%u' ORDER BY button", GUID_LOPART(m_guid));
+    //res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADACTIONS,         "SELECT button,action,type,misc FROM character_action WHERE guid = '%u' ORDER BY button", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADMAILCOUNT,       "SELECT COUNT(id) FROM mail WHERE receiver = '%u' AND (checked & 1)=0 AND deliver_time <= '" UI64FMTD "'", GUID_LOPART(m_guid), (uint64)time(NULL));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADMAILDATE,        "SELECT MIN(deliver_time) FROM mail WHERE receiver = '%u' AND (checked & 1)=0", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADSOCIALLIST,      "SELECT friend,flags,note FROM character_social WHERE guid = '%u' LIMIT 255", GUID_LOPART(m_guid));
@@ -108,6 +108,7 @@ bool LoginQueryHolder::Initialize()
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADARENAINFO,       "SELECT arenateamid, played_week, played_season, personal_rating FROM arena_team_member WHERE guid='%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADBGDATA,          "SELECT instance_id, team, join_x, join_y, join_z, join_o, join_map, taxi_start, taxi_end, mount_spell FROM character_battleground_data WHERE guid = '%u'", GUID_LOPART(m_guid));
     res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADSKILLS,          "SELECT skill, value, max FROM character_skills WHERE guid = '%u'", GUID_LOPART(m_guid));
+	res &= SetPQuery(PLAYER_LOGIN_QUERY_LOADTALENTS,         "SELECT spell, spec FROM character_talent WHERE guid = '%u'", GUID_LOPART(m_guid));
 
     return res;
 }
diff --git a/src/server/game/Handlers/SkillHandler.cpp b/src/server/game/Handlers/SkillHandler.cpp
index f143f03b..ecd84cb4 100644
--- a/src/server/game/Handlers/SkillHandler.cpp
+++ b/src/server/game/Handlers/SkillHandler.cpp
@@ -24,14 +24,117 @@
 #include "WorldSession.h"
 #include "ObjectAccessor.h"
 #include "SpellAuras.h"
-
+#include "DatabaseEnv.h"
 void WorldSession::HandleLearnTalentOpcode(WorldPacket& recv_data)
 {
     uint32 talent_id, requested_rank;
     recv_data >> talent_id >> requested_rank;
 
-    Player* player = GetPlayer();
-    player->LearnTalent(talent_id, requested_rank);
+    uint32 CurTalentPoints =  GetPlayer()->GetFreeTalentPoints();
+
+    if (CurTalentPoints == 0)
+        return;
+
+    if (requested_rank > 4)
+        return;
+
+    TalentEntry const *talentInfo = sTalentStore.LookupEntry(talent_id);
+
+    if (!talentInfo)
+        return;
+
+    TalentTabEntry const *talentTabInfo = sTalentTabStore.LookupEntry(talentInfo->TalentTab);
+
+    if (!talentTabInfo)
+        return;
+
+    Player * player = GetPlayer();
+
+    // prevent learn talent for different class (cheating)
+    if ((player->getClassMask() & talentTabInfo->ClassMask) == 0)
+        return;
+
+    // prevent skip talent ranks (cheating)
+    if (requested_rank > 0 && !player->HasSpell(talentInfo->RankID[requested_rank-1]))
+        return;
+
+    // Check if it requires another talent
+    if (talentInfo->DependsOn > 0)
+    {
+        if (TalentEntry const *depTalentInfo = sTalentStore.LookupEntry(talentInfo->DependsOn))
+        {
+            bool hasEnoughRank = false;
+            for (int i = talentInfo->DependsOnRank; i <= 4; i++)
+            {
+                if (depTalentInfo->RankID[i] != 0)
+                    if (player->HasSpell(depTalentInfo->RankID[i]))
+                        hasEnoughRank = true;
+            }
+            if (!hasEnoughRank)
+                return;
+        }
+    }
+
+    // Check if it requires spell
+    if (talentInfo->DependsOnSpell && !player->HasSpell(talentInfo->DependsOnSpell))
+        return;
+
+    // Find out how many points we have in this field
+    uint32 spentPoints = 0;
+
+    uint32 tTab = talentInfo->TalentTab;
+    if (talentInfo->Row > 0)
+    {
+        unsigned int numRows = sTalentStore.GetNumRows();
+        for (unsigned int i = 0; i < numRows; i++)          // Loop through all talents.
+        {
+            // Someday, someone needs to revamp
+           const TalentEntry *tmpTalent = sTalentStore.LookupEntry(i);
+           if (tmpTalent)                                  // the way talents are tracked
+            {
+               if (tmpTalent->TalentTab == tTab)
+                {
+                    for (int j = 0; j <= 4; j++)
+                    {
+                        if (tmpTalent->RankID[j] != 0)
+                        {
+                            if (player->HasSpell(tmpTalent->RankID[j]))
+                            {
+                                spentPoints += j + 1;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    // not have required min points spent in talent tree
+    if (spentPoints < (talentInfo->Row * 5))
+        return;
+
+    // spell not set in talent.dbc
+    uint32 spellid = talentInfo->RankID[requested_rank];
+    if (spellid == 0)
+    {
+        sLog.outError("Talent.dbc have for talent: %u Rank: %u spell id = 0", talent_id, requested_rank);
+        return;
+    }
+
+    // already known
+    if (GetPlayer()->HasSpell(spellid))
+        return;
+
+    // learn! (other talent ranks will unlearned at learning)
+    GetPlayer()->LearnSpell(spellid);
+    GetPlayer()->addTalent(spellid, GetPlayer()->GetActiveSpec(), true);
+    sLog.outDetail("TalentID: %u Rank: %u Spell: %u\n", talent_id, requested_rank, spellid);
+
+    // update free talent points
+    GetPlayer()->SetFreeTalentPoints(CurTalentPoints - 1);
+
+    // look for higher ranks
+   // GetPlayer()->AutoLearnTalentsForLevel();
 }
 
 void WorldSession::HandleTalentWipeOpcode(WorldPacket& recv_data)
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 6449e484..fd0e618b 100644
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -24,6 +24,7 @@
 //void AddSC_custom_gossip_codebox();
 //void AddSC_test();
 void AddSC_npc_arena_spectator();
+void AddSC_custom_dualspec();
 void AddModuleScripts();
 //world
 void AddSC_areatrigger_scripts();
@@ -434,6 +435,7 @@ void AddScripts()
     //    AddSC_custom_gossip_codebox();
     //    AddSC_test();
     AddSC_npc_arena_spectator();
+	AddSC_custom_dualspec();
     AddModuleScripts();
     AddSC_areatrigger_scripts();
     AddSC_boss_emeriss();
diff --git a/src/server/scripts/Custom/custom_dualspec.cpp b/src/server/scripts/Custom/custom_dualspec.cpp
new file mode 100644
index 00000000..fe7adae9
--- /dev/null
+++ b/src/server/scripts/Custom/custom_dualspec.cpp
@@ -0,0 +1,102 @@
+﻿#include "ScriptMgr.h"
+#include "ScriptedCreature.h"
+#include "ScriptedGossip.h"
+#include <cstring>
+
+class custom_dualspec : CreatureScript
+{
+public:
+    custom_dualspec() : CreatureScript("custom_dualspec") {}
+	
+	bool OnGossipHello(Player *player, Creature *_Creature) override
+    {
+
+    uint8 specCount = player->GetSpecsCount();
+    if (specCount < MAX_TALENT_SPECS)
+    {
+        // This fuction add's a menu item,
+        // a - Icon Id
+        // b - Text
+        // c - Sender(this is to identify the current Menu with this item)
+        // d - Action (identifys this Menu Item)
+        // e - Text to be displayed in pop up box
+        // f - Money value in pop up box
+        player->ADD_GOSSIP_ITEM_EXTENDED(0, u8"\uFFFD开启双天赋需要1000金币", GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF + 0, u8"\uFFFD你确定要开启第二天赋吗？", 10000000, false);
+    }
+
+    for (uint8 i = 0; i < specCount; ++i)
+    {
+        std::stringstream specNameString;
+        specNameString << "[Activate] ";
+        if (player->GetSpecName(i) == "NULL")
+            specNameString << "(Unnamed)";
+        else
+            specNameString << player->GetSpecName(i);
+        if (i == player->GetActiveSpec())
+            specNameString << " <current>";
+        else
+            specNameString << "";
+        player->ADD_GOSSIP_ITEM(0, specNameString.str(), GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF + (1 + i));
+    }
+
+    for (uint8 i = 0; i < specCount; ++i)
+    {
+        std::stringstream specNameString;
+        specNameString << "[Rename] ";
+        if (player->GetSpecName(i) == "NULL")
+            specNameString << "(Unnamed)";
+        else
+            specNameString << player->GetSpecName(i);
+        if (i == player->GetActiveSpec())
+            specNameString << " <current>";
+        else
+            specNameString << "";
+        player->ADD_GOSSIP_ITEM_EXTENDED(0, specNameString.str(), GOSSIP_SENDER_MAIN, GOSSIP_ACTION_INFO_DEF + (10 + i), "", 0, true);
+    }
+
+    player->SEND_GOSSIP_MENU(1, _Creature->GetGUID());
+    return true;
+}
+
+bool OnGossipSelect(Player *player, Creature *_Creature, uint32 sender, uint32 action) override
+    {
+    switch (action)
+    {
+        case GOSSIP_ACTION_INFO_DEF + 0:
+            if (player->GetMoney() < 10000000)
+            {
+                _Creature->Whisper(u8"\uFFFD你的钱不够！", player->GetGUID());
+                break;
+            }
+            player->SetSpecsCount(player->GetSpecsCount() + 1);
+            player->ModifyMoney(-10000000);
+            player->CLOSE_GOSSIP_MENU();
+            break;
+        case GOSSIP_ACTION_INFO_DEF + 1:
+            player->ActivateSpec(0);
+            break;
+        case GOSSIP_ACTION_INFO_DEF + 2:
+            player->ActivateSpec(1);
+            break;
+        default:
+            break;
+    }
+
+    return true;
+}
+
+bool OnGossipSelectCode(Player* player, Creature* creature, uint32 sender, uint32 action, const char* sCode) override
+{
+    if (action == GOSSIP_ACTION_INFO_DEF + 10)
+        player->SetSpecName(0, sCode);
+    else if (action == GOSSIP_ACTION_INFO_DEF + 11)
+        player->SetSpecName(1, sCode);
+
+    player->CLOSE_GOSSIP_MENU();
+    return true;
+}
+};
+void AddSC_custom_dualspec()
+{
+    new custom_dualspec;
+}
\ No newline at end of file
-- 
2.28.0.windows.1

